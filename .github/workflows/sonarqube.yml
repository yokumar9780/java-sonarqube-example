name: SonarQube Analysis
run-name: ${{ github.actor }} is running SonarQube Analysis on ${{ github.ref_name }} environment ðŸš€
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'README.md'
      - 'docker-compose/*'
      - 'altair/*'
    branches:
      - 'develop'
  pull_request:

jobs:
  sonar:
    name: Run SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0  # Important for SonarQube to get all history for better analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Build with Maven
        run: mvn -B clean dependency:copy-dependencies compile

      - name: Locate Java binaries
        id: find-binaries
        run: |
          # First try to find the most common Maven target directory
          if [ -d "target/classes" ]; then
            echo "binaries_path=target/classes" >> $GITHUB_OUTPUT
          # Check for Gradle build directory
          elif [ -d "build/classes" ]; then
            echo "binaries_path=build/classes" >> $GITHUB_OUTPUT
          # Set a fallback
          else
            # Create an empty directory as fallback
            mkdir -p target/classes
            echo "binaries_path=target/classes" >> $GITHUB_OUTPUT
          fi

      - name: Locate Java binaries
        id: find-libraries
        run: |
          # Find libraries (jars)
          if [ -d "target/dependency" ]; then
            LIBRARIES=$(find "target/dependency" -name "*.jar" | tr '\n' ',')
          elif [ -d ".m2" ]; then
            LIBRARIES=$(find "$HOME/.m2" -name "*.jar" | tr '\n' ',')
          else
            LIBRARIES=""
          fi
          # Save libraries path
          echo "libraries_path=$LIBRARIES" >> $GITHUB_OUTPUT

      - name: Setup certificate trust
        run: |
          # Create a custom truststore
          echo -n | openssl s_client -connect <<SONAR_SERVER_URL>>:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > sonar.crt
          mkdir -p $GITHUB_WORKSPACE/certs
          # Create new truststore with the certificate
          keytool -import -noprompt -trustcacerts -alias sonarqube -file sonar.crt -keystore $GITHUB_WORKSPACE/certs/truststore.jks -storepass changeit
          echo "SONAR_SCANNER_OPTS=-Djavax.net.ssl.trustStore=$GITHUB_WORKSPACE/certs/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit" >> $GITHUB_ENV

      - name: Download SonarScanner CLI
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.1.0.4889.zip
          unzip sonar-scanner.zip
          echo "$GITHUB_WORKSPACE/sonar-scanner-7.1.0.4889/bin" >> $GITHUB_PATH
          chmod +x $GITHUB_WORKSPACE/sonar-scanner-7.1.0.4889/bin/sonar-scanner

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: |
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          echo "Repository Name: $REPO_NAME"
          echo "libraries_path: ${{ steps.find-libraries.outputs.libraries_path }}"
          sonar-scanner \
            -Dsonar.host.url=https://<<SONAR_SERVER_URL>> \
            -Dsonar.projectKey=$REPO_NAME \
            -Dsonar.projectName=$REPO_NAME \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=src \
            -Dsonar.java.binaries=${{ steps.find-binaries.outputs.binaries_path }} \
            -Dsonar.java.libraries=${{ steps.find-libraries.outputs.libraries_path }} \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.scm.revision=${{ github.sha }}